{"version":3,"sources":["components/TestComponent1/TestComponent1.js","components/TestComponent2/TestComponent2.js","App.js","reportWebVitals.js","index.js"],"names":["TestComponent1","props","_name","name","TestComponent2","state","items","isLoaded","fetch","then","res","json","setTimeout","setState","this","map","item","email","id","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAUeA,EAPQ,SAACC,GACpB,IAAIC,EAAQD,EAAME,KAClB,OACQ,8EAAiDD,EAAjD,Q,4BC0CGE,E,kDA5CX,WAAYH,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAQ,CACTC,MAAQ,GACRC,UAAU,GAJA,E,qDAQlB,WAAoB,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFC,YAAW,WACP,EAAKC,SAAS,CACVP,MAAQK,EACRJ,UAAU,MAEf,U,oBAIX,WAAS,IAAD,EAEoBO,KAAKT,MAAxBE,EAFD,EAECA,SAAUD,EAFX,EAEWA,MAEf,OAAIC,EAEI,6BACKD,EAAMS,KAAI,SAAAC,GACP,OACA,yCACYA,EAAKb,KADjB,aACiCa,EAAKC,QAD7BD,EAAKE,SAQtB,kD,GAxCaC,aCUdC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAgBlB,KAAK,cACrB,cAAC,EAAD,CAAgBA,KAAK,kBCKZmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.813b65c1.chunk.js","sourcesContent":["import React from 'react';\n\n// This is just a dummy test component\nconst TestComponent1 = (props) => {\n    var _name = props.name\n    return (\n            <p> This is test component with props :- name : {_name} </p>\n    )\n}\n\nexport default TestComponent1","import React, {Component} from 'react';\n\nclass TestComponent2 extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            items : [],\n            isLoaded: false\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then(json => {\n            setTimeout(()=>{\n                this.setState({\n                    items : json,\n                    isLoaded: true\n                })\n            }, 2000)\n        })\n    }\n\n    render(){\n        \n        var {isLoaded, items} = this.state\n\n        if (isLoaded) {\n            return (\n                <ul>\n                    {items.map(item=>{\n                        return(\n                        <li key={item.id}>\n                            Name : {item.name} | Email: {item.email}\n                        </li>)\n                    })}\n                </ul>\n            )\n        } else{\n            return (\n                <div>Loading....</div>\n            )\n        }\n    }\n}\n\nexport default TestComponent2","import TestComponent1 from './components/TestComponent1/TestComponent1'\nimport TestComponent2 from './components/TestComponent2/TestComponent2'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TestComponent1 name=\"test_name\"/>\n      <TestComponent2 name=\"test_name\"/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}